import os, string

@VERSIONING@if not os.environ.has_key('MODULE_VERSION'):
@VERSIONING@        os.environ['MODULE_VERSION_STACK'] = '@VERSION@'
@VERSIONING@        os.environ['MODULE_VERSION'] = '@VERSION@'
@VERSIONING@else:
@VERSIONING@        os.environ['MODULE_VERSION_STACK'] = os.environ['MODULE_VERSION']
@VERSIONING@os.environ['MODULESHOME'] = '@prefix@'

if not os.environ.has_key('MODULEPATH'):
        os.environ['MODULEPATH'] = os.popen("""sed 's/#.*$//' ${MODULESHOME}/init/.modulespath | awk 'NF==1{printf("%s:",$1)}'""").readline()

if not os.environ.has_key('LOADEDMODULES'):
        os.environ['LOADEDMODULES'] = '';

def module(command, *arguments):
@VERSIONING@        commands = os.popen('@BASEPREFIX@/Modules/%s/bin/modulecmd python %s %s' % (os.environ['MODULE_VERSION'], command, string.join(arguments))).read()
@NOTVERSIONING@        commands = os.popen('@bindir@/modulecmd python %s %s' % (command, string.join(arguments))).read()
        exec commands
